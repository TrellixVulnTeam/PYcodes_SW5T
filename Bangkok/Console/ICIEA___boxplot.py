import numpy as np
from numpy.random import randn
import pandas as pd
from scipy import stats
import matplotlib as mpl
import matplotlib.pyplot as plt

from pylab import plot, show, savefig, xlim, figure, \
                hold, ylim, legend, boxplot, setp, axes



# function for setting the colors of the box plots pairs
def setBoxColors(bp):
    setp(bp['boxes'][0], color='black')
    setp(bp['caps'][0], color='black')
    setp(bp['caps'][1], color='black')
    setp(bp['whiskers'][0], color='black')
    setp(bp['whiskers'][1], color='black')
    setp(bp['fliers'][0], color='black')
    setp(bp['fliers'][1], color='black')
    setp(bp['medians'][0], color='black')

    setp(bp['boxes'][1], color='red')
    setp(bp['caps'][2], color='red')
    setp(bp['caps'][3], color='red')
    setp(bp['whiskers'][2], color='red')
    setp(bp['whiskers'][3], color='red')
    setp(bp['fliers'][2], color='red')
    setp(bp['fliers'][3], color='red')
    setp(bp['medians'][1], color='red')

np.random.seed(9221999)

data = [randn(100), randn(100) + 1]

data = [[0.60172988459303922, 0.60243497999732198, 0.59728711356016506, 0.60146725851424032, 0.60194551313250444, 0.60293204411709334, 0.60120188256910456, 0.60307743877936704, 0.60286985584948394, 0.59994832559672251, 0.60170871607014931, 0.60147343992961044, 0.59987634601898732, 0.60256582947938531, 0.59993885515409362, 0.60058096588365506, 0.60189944680034813, 0.60268361448009078, 0.60135319553753031, 0.60540153840154609, 0.60189010275354315, 0.60362246725264734, 0.60171276069524482, 0.60476882568839729, 0.59738592658553535, 0.60083287217979486, 0.60261711145040242, 0.60203567121467827, 0.60108763889455874, 0.60533163635522347, 0.60221986121308513, 0.60203341341743166, 0.60260611005009024, 0.60377254255887713, 0.60201726254593102, 0.60205831857349368, 0.60419976063113479, 0.6019790077332472, 0.60162724073484064, 0.60159067087324325],
        [0.59653534906234407, 0.59135697811617327, 0.58604747075379982, 0.59305392386442779, 0.59107181406461307, 0.59554213808447409, 0.59348320685448641, 0.5697205972117042, 0.59095371373614258, 0.58710454477616469, 0.59009962471555333, 0.56728852351555503, 0.59381391897727431, 0.59627792029741267, 0.58705179056719681, 0.57732299768544282, 0.5925584324735258, 0.59637745048766211, 0.58683307959265874, 0.55942706556483324, 0.57006793722704385, 0.59275616323989866, 0.5884581867738139, 0.58609678810954313, 0.59183490494081303, 0.58839790571703598, 0.5916644446139423, 0.59787723095410983, 0.59504254774505705, 0.58868714834710623, 0.59054941999708044, 0.5922609923342671, 0.57083524631290861, 0.59092435470675886, 0.59327276518873473, 0.58897704509462356, 0.59248955666106928, 0.56761799182396167, 0.58851500022125502, 0.5912035105925928]]
labels = ('NSGA-II', 'SPEA2')
xlim(0,6)
ylim(0.585,0.606)
plt.boxplot(data, labels=labels, notch=True);
plt.pause(20.01)


# Some fake data to plot
A= [[1, 2, 5,],  [7, 2]]
B = [[5, 7, 2, 2, 5], [7, 2, 5]]
C = [[3,2,5,7], [6, 7, 3]]



data1 = [[0.60172988459303922, 0.60243497999732198, 0.59728711356016506, 0.60146725851424032, 0.60194551313250444, 0.60293204411709334, 0.60120188256910456, 0.60307743877936704, 0.60286985584948394, 0.59994832559672251, 0.60170871607014931, 0.60147343992961044, 0.59987634601898732, 0.60256582947938531, 0.59993885515409362, 0.60058096588365506, 0.60189944680034813, 0.60268361448009078, 0.60135319553753031, 0.60540153840154609, 0.60189010275354315, 0.60362246725264734, 0.60171276069524482, 0.60476882568839729, 0.59738592658553535, 0.60083287217979486, 0.60261711145040242, 0.60203567121467827, 0.60108763889455874, 0.60533163635522347, 0.60221986121308513, 0.60203341341743166, 0.60260611005009024, 0.60377254255887713, 0.60201726254593102, 0.60205831857349368, 0.60419976063113479, 0.6019790077332472, 0.60162724073484064, 0.60159067087324325],
        [0.59653534906234407, 0.59135697811617327, 0.58604747075379982, 0.59305392386442779, 0.59107181406461307, 0.59554213808447409, 0.59348320685448641, 0.5697205972117042, 0.59095371373614258, 0.58710454477616469, 0.59009962471555333, 0.56728852351555503, 0.59381391897727431, 0.59627792029741267, 0.58705179056719681, 0.57732299768544282, 0.5925584324735258, 0.59637745048766211, 0.58683307959265874, 0.55942706556483324, 0.57006793722704385, 0.59275616323989866, 0.5884581867738139, 0.58609678810954313, 0.59183490494081303, 0.58839790571703598, 0.5916644446139423, 0.59787723095410983, 0.59504254774505705, 0.58868714834710623, 0.59054941999708044, 0.5922609923342671, 0.57083524631290861, 0.59092435470675886, 0.59327276518873473, 0.58897704509462356, 0.59248955666106928, 0.56761799182396167, 0.58851500022125502, 0.5912035105925928]]

data2 = [[0.6044846541395863, 0.60406664960188516, 0.60219283872307794, 0.60271067447565274, 0.60210931811148838, 0.60193198705050954, 0.60259218848467111, 0.6025069299667376, 0.60278742828323395, 0.60465729402753832, 0.60287397754633376, 0.60163194672937514, 0.60096232429925278, 0.60103967038329043, 0.6030014444651105, 0.60167041437345425, 0.60074201270541883, 0.60420485020582215, 0.60355686247375717, 0.60368177795569145, 0.60215369409041675, 0.60384718695487594, 0.6044064154236054, 0.60047827727240988, 0.60248517574797822, 0.60168024673624254, 0.60265192829242575, 0.60579348256043442, 0.60242934625035738, 0.6024986870728144, 0.60023398586944865, 0.60343365621744527, 0.59914057666876597, 0.6008809889430905, 0.60241849639798906, 0.59769739700002666, 0.60396806765426891, 0.60345087993702895, 0.60561687052408764, 0.60453992840375792],
         [0.59250387520270198, 0.59305542154161717, 0.59410775950874106, 0.59817340329421909, 0.58701915869959798, 0.59565680842111624, 0.59479349832223782, 0.5950856209956592, 0.59105331348422208, 0.59252046156512261, 0.59525697504535846, 0.59899578991133073, 0.59637486098761949, 0.59243342078851524, 0.59854330713439963, 0.59408756051288669, 0.58341596327123335, 0.5965762205969013, 0.58903805730832193, 0.59834899168584521, 0.59056431167647994, 0.59387218922785512, 0.5701591468141598,0.58887576779131079, 0.60046434756103706, 0.59550536105995044, 0.59131944429347572, 0.5971981503084155, 0.5986694791956445, 0.59591007085369607, 0.59646775045163225, 0.58943636583629533, 0.59573670459003769, 0.59099701013176964, 0.59636416248743163, 0.59792784171028546, 0.59049220873725572, 0.59413410394252775, 0.58959301315393498, 0.5910465678290322]]

data3 = [[0.59549341766285069, 0.59127719514092481, 0.60198905365783073, 0.59926642866291002, 0.60097379075504076, 0.59623011115471358, 0.59388000170592004, 0.60245052611565864, 0.59896111663431473, 0.60111509335124158, 0.59897072249586081, 0.59991957507782068, 0.60239688280057613, 0.59615867480370976, 0.60016561964653459, 0.59760845453201905, 0.60016810628965189, 0.60002115012976409, 0.60335734408898545, 0.59775188585485917, 0.59921549611287017, 0.60105020255949637, 0.60127338805395181, 0.59530206858307588, 0.59683852424659145, 0.59774694930067074, 0.59281515944212737, 0.59984618659339206, 0.59759497660914163, 0.59696159998727061, 0.59651158467452925, 0.6000589951783184, 0.59789050510897157, 0.60092877693427327, 0.59477731942432988, 0.60091524171314681, 0.59750033969021377, 0.5948664492871738, 0.59663743635805677, 0.59606657241209648],
         [0.54182355579245867, 0.5440887058320929, 0.56826744933096729, 0.54268950598804355, 0.54289786875924184, 0.57017022573903597, 0.55910749259102976, 0.56176905256127219, 0.5517210443541567, 0.55409754096030228, 0.56160109899886412, 0.54444976745777052, 0.53937420176461248, 0.56216630551815994, 0.5368702220744227, 0.54056296659399095, 0.53062631514440228, 0.56586068883965712, 0.55726967460926613, 0.53585439391327949, 0.55844813994126796, 0.55132097430345539, 0.56950793648422438, 0.55017323750647884, 0.5374934445267664, 0.55079032665300898, 0.56092993725990858, 0.54825497674045798, 0.54877274969403589, 0.53416363310831716, 0.54433692476979145, 0.54595631821532642, 0.53897283723423173, 0.5489934650229803, 0.54598753436790448, 0.57358336923015552, 0.53427461439365875, 0.52096718863797342, 0.5422326517216346, 0.56346800979802036]]

data4 = [[0.57240149270268803, 0.58625408772267151, 0.58434752318528072, 0.57152487813218322, 0.58718796878764989, 0.58291086847160767, 0.58096705231829915, 0.58079352071484081, 0.55914869999095063, 0.58906674566518469, 0.57897681405785018, 0.57961270028933165, 0.55368345337566016, 0.58860667532201782, 0.57962747281725158, 0.58234187284105865, 0.58868887608292053, 0.58139130991804555, 0.57584067118595672, 0.58690140359602117, 0.58461803122395728, 0.59505394895418751, 0.58441769143427313, 0.58934118809529779, 0.58152129908619787, 0.57605746304331318, 0.58029623350268855, 0.57668195121153565, 0.58199356160852778, 0.59101996408255897, 0.57500255149928703, 0.58980264590665954, 0.5746341397219491, 0.58679892621578278, 0.57365447908173961, 0.5833976061951136, 0.59305768316338692, 0.58386577769192394, 0.58287381575818242, 0.58732784335714816],
         [0.55345239154832049, 0.51656279142387362, 0.53774091540517532, 0.54166929827456622, 0.54897922203919258, 0.53453545494395904, 0.5355471849786434, 0.53329837399533442, 0.56532723238504057, 0.53319218483870834, 0.55301699169277163, 0.53573105229483509, 0.54032023475584823, 0.52622037256161547, 0.55269199959155402, 0.51600382697649361, 0.52537990665518741, 0.55041492341722897, 0.55834432868175776, 0.54447729898970876, 0.53455419001541038, 0.55805542928144392, 0.53396236410760123, 0.53113359615387801, 0.52354923773798023, 0.53822071417531525, 0.51420734884731178, 0.52619849776879968, 0.51874795960891507, 0.5185185634576398, 0.54261568644779656, 0.53017516274073628, 0.55378977698814502, 0.54910325007044081, 0.54044334293783214, 0.52448281263631369, 0.5658857010661873, 0.52097455553952532, 0.55460649485652047, 0.50878390764487458]]

#round data
finaldata=[]
tempdata=[]
for i in data1[0]:
    tempdata.append(round(i,3))
finaldata.append(tempdata)
tempdata=[]
for i in data1[1]:
    tempdata.append(round(i,3))
finaldata.append(tempdata)
data1=finaldata

#round data
finaldata=[]
tempdata=[]
for i in data2[0]:
    tempdata.append(round(i,3))
finaldata.append(tempdata)
tempdata=[]
for i in data2[1]:
    tempdata.append(round(i,3))
finaldata.append(tempdata)
data2=finaldata


#round data
finaldata=[]
tempdata=[]
for i in data3[0]:
    tempdata.append(round(i,3))
finaldata.append(tempdata)
tempdata=[]
for i in data3[1]:
    tempdata.append(round(i,3))
finaldata.append(tempdata)
data3=finaldata


#round data
finaldata=[]
tempdata=[]
for i in data4[0]:
    tempdata.append(round(i,3))
finaldata.append(tempdata)
tempdata=[]
for i in data4[1]:
    tempdata.append(round(i,3))
finaldata.append(tempdata)
data4=finaldata






fig = figure()
ax = axes()
hold(True)

# first boxplot pair
bp = boxplot(data1, positions = [1, 2], widths = 0.6, notch=True)
setBoxColors(bp)

# second boxplot pair
bp = boxplot(data2, positions = [4, 5], widths = 0.6, notch=True)
setBoxColors(bp)
#bp = boxplot(B, positions = [4, 5], widths = 0.6)
#setBoxColors(bp)

# thrid boxplot pair
bp = boxplot(data3, positions = [7, 8], widths = 0.6, notch=True)
setBoxColors(bp)
#bp = boxplot(C, positions = [7, 8], widths = 0.6)
#setBoxColors(bp)


# thrid boxplot pair
bp = boxplot(data4, positions = [10, 11], widths = 0.6, notch=True)
setBoxColors(bp)

# set axes limits and labels
xlim(0,12)
ylim(0.50,0.61)

ax.set_xticklabels(['Fix Random', 'Fix Greedy', 'No Fix Loop', 'No Fix'])
ax.set_xticks([1.5, 4.5, 7.5, 10.5])

# draw temporary red and blue lines and use them to create a legend
hB, = plot([1,1],'k-')
hR, = plot([1,1],'r-')
legend((hB, hR),('NSGA-II', 'SPEA-2'))
hB.set_visible(False)
hR.set_visible(False)
savefig('boxcompare.png')
show()



